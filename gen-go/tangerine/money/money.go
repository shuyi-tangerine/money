// Code generated by Thrift Compiler (0.17.0). DO NOT EDIT.

package money

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/shuyi-tangerine/money/gen-go/base"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = base.GoUnusedProtection__

// Attributes:
//   - Amount
//   - Base
type GenFinanceDetailIDsRequest struct {
	Amount int8 `thrift:"amount,1" db:"amount" json:"amount"`
	// unused fields # 2 to 254
	Base *base.RPCRequest `thrift:"Base,255" db:"Base" json:"Base,omitempty"`
}

func NewGenFinanceDetailIDsRequest() *GenFinanceDetailIDsRequest {
	return &GenFinanceDetailIDsRequest{
		Amount: 1,
	}
}

var GenFinanceDetailIDsRequest_Amount_DEFAULT int8 = 1

func (p *GenFinanceDetailIDsRequest) GetAmount() int8 {
	return p.Amount
}

var GenFinanceDetailIDsRequest_Base_DEFAULT *base.RPCRequest

func (p *GenFinanceDetailIDsRequest) GetBase() *base.RPCRequest {
	if !p.IsSetBase() {
		return GenFinanceDetailIDsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GenFinanceDetailIDsRequest) IsSetAmount() bool {
	return p.Amount != GenFinanceDetailIDsRequest_Amount_DEFAULT
}

func (p *GenFinanceDetailIDsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GenFinanceDetailIDsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField255(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GenFinanceDetailIDsRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.Amount = temp
	}
	return nil
}

func (p *GenFinanceDetailIDsRequest) ReadField255(ctx context.Context, iprot thrift.TProtocol) error {
	p.Base = &base.RPCRequest{}
	if err := p.Base.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
	}
	return nil
}

func (p *GenFinanceDetailIDsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GenFinanceDetailIDsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField255(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GenFinanceDetailIDsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAmount() {
		if err := oprot.WriteFieldBegin(ctx, "amount", thrift.BYTE, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:amount: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(p.Amount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.amount (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:amount: ", p), err)
		}
	}
	return err
}

func (p *GenFinanceDetailIDsRequest) writeField255(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err := oprot.WriteFieldBegin(ctx, "Base", thrift.STRUCT, 255); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:Base: ", p), err)
		}
		if err := p.Base.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 255:Base: ", p), err)
		}
	}
	return err
}

func (p *GenFinanceDetailIDsRequest) Equals(other *GenFinanceDetailIDsRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Amount != other.Amount {
		return false
	}
	if !p.Base.Equals(other.Base) {
		return false
	}
	return true
}

func (p *GenFinanceDetailIDsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenFinanceDetailIDsRequest(%+v)", *p)
}

// Attributes:
//   - Ids
//   - Base
type GenFinanceDetailIDsResponse struct {
	Ids []int64 `thrift:"ids,1" db:"ids" json:"ids,omitempty"`
	// unused fields # 2 to 254
	Base *base.RPCResponse `thrift:"Base,255,required" db:"Base" json:"Base"`
}

func NewGenFinanceDetailIDsResponse() *GenFinanceDetailIDsResponse {
	return &GenFinanceDetailIDsResponse{}
}

var GenFinanceDetailIDsResponse_Ids_DEFAULT []int64

func (p *GenFinanceDetailIDsResponse) GetIds() []int64 {
	return p.Ids
}

var GenFinanceDetailIDsResponse_Base_DEFAULT *base.RPCResponse

func (p *GenFinanceDetailIDsResponse) GetBase() *base.RPCResponse {
	if !p.IsSetBase() {
		return GenFinanceDetailIDsResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *GenFinanceDetailIDsResponse) IsSetIds() bool {
	return p.Ids != nil
}

func (p *GenFinanceDetailIDsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GenFinanceDetailIDsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetBase bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField255(ctx, iprot); err != nil {
					return err
				}
				issetBase = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetBase {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Base is not set"))
	}
	return nil
}

func (p *GenFinanceDetailIDsResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.Ids = tSlice
	for i := 0; i < size; i++ {
		var _elem0 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.Ids = append(p.Ids, _elem0)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GenFinanceDetailIDsResponse) ReadField255(ctx context.Context, iprot thrift.TProtocol) error {
	p.Base = &base.RPCResponse{}
	if err := p.Base.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
	}
	return nil
}

func (p *GenFinanceDetailIDsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GenFinanceDetailIDsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField255(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GenFinanceDetailIDsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetIds() {
		if err := oprot.WriteFieldBegin(ctx, "ids", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ids: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Ids)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Ids {
			if err := oprot.WriteI64(ctx, int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ids: ", p), err)
		}
	}
	return err
}

func (p *GenFinanceDetailIDsResponse) writeField255(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Base", thrift.STRUCT, 255); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:Base: ", p), err)
	}
	if err := p.Base.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 255:Base: ", p), err)
	}
	return err
}

func (p *GenFinanceDetailIDsResponse) Equals(other *GenFinanceDetailIDsResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Ids) != len(other.Ids) {
		return false
	}
	for i, _tgt := range p.Ids {
		_src1 := other.Ids[i]
		if _tgt != _src1 {
			return false
		}
	}
	if !p.Base.Equals(other.Base) {
		return false
	}
	return true
}

func (p *GenFinanceDetailIDsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenFinanceDetailIDsResponse(%+v)", *p)
}

// Attributes:
//   - AppID
//   - Amount
//   - OperatedType
//   - OperatedAt
//   - OperatedBy
//   - Extra
//   - CreatedBy
//   - FinanceDetailID
//   - Base
type AddFinanceDetailRequest struct {
	AppID           int64   `thrift:"app_id,1,required" db:"app_id" json:"app_id"`
	Amount          int64   `thrift:"amount,2,required" db:"amount" json:"amount"`
	OperatedType    int64   `thrift:"operated_type,3,required" db:"operated_type" json:"operated_type"`
	OperatedAt      int64   `thrift:"operated_at,4,required" db:"operated_at" json:"operated_at"`
	OperatedBy      string  `thrift:"operated_by,5,required" db:"operated_by" json:"operated_by"`
	Extra           *string `thrift:"extra,6" db:"extra" json:"extra,omitempty"`
	CreatedBy       string  `thrift:"created_by,7,required" db:"created_by" json:"created_by"`
	FinanceDetailID int64   `thrift:"finance_detail_id,8" db:"finance_detail_id" json:"finance_detail_id"`
	// unused fields # 9 to 254
	Base *base.RPCRequest `thrift:"Base,255" db:"Base" json:"Base,omitempty"`
}

func NewAddFinanceDetailRequest() *AddFinanceDetailRequest {
	return &AddFinanceDetailRequest{}
}

func (p *AddFinanceDetailRequest) GetAppID() int64 {
	return p.AppID
}

func (p *AddFinanceDetailRequest) GetAmount() int64 {
	return p.Amount
}

func (p *AddFinanceDetailRequest) GetOperatedType() int64 {
	return p.OperatedType
}

func (p *AddFinanceDetailRequest) GetOperatedAt() int64 {
	return p.OperatedAt
}

func (p *AddFinanceDetailRequest) GetOperatedBy() string {
	return p.OperatedBy
}

var AddFinanceDetailRequest_Extra_DEFAULT string

func (p *AddFinanceDetailRequest) GetExtra() string {
	if !p.IsSetExtra() {
		return AddFinanceDetailRequest_Extra_DEFAULT
	}
	return *p.Extra
}

func (p *AddFinanceDetailRequest) GetCreatedBy() string {
	return p.CreatedBy
}

var AddFinanceDetailRequest_FinanceDetailID_DEFAULT int64 = 0

func (p *AddFinanceDetailRequest) GetFinanceDetailID() int64 {
	return p.FinanceDetailID
}

var AddFinanceDetailRequest_Base_DEFAULT *base.RPCRequest

func (p *AddFinanceDetailRequest) GetBase() *base.RPCRequest {
	if !p.IsSetBase() {
		return AddFinanceDetailRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *AddFinanceDetailRequest) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *AddFinanceDetailRequest) IsSetFinanceDetailID() bool {
	return p.FinanceDetailID != AddFinanceDetailRequest_FinanceDetailID_DEFAULT
}

func (p *AddFinanceDetailRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddFinanceDetailRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetAppID bool = false
	var issetAmount bool = false
	var issetOperatedType bool = false
	var issetOperatedAt bool = false
	var issetOperatedBy bool = false
	var issetCreatedBy bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetAppID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetAmount = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetOperatedType = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetOperatedAt = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetOperatedBy = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
				issetCreatedBy = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField255(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetAppID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppID is not set"))
	}
	if !issetAmount {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Amount is not set"))
	}
	if !issetOperatedType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OperatedType is not set"))
	}
	if !issetOperatedAt {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OperatedAt is not set"))
	}
	if !issetOperatedBy {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OperatedBy is not set"))
	}
	if !issetCreatedBy {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CreatedBy is not set"))
	}
	return nil
}

func (p *AddFinanceDetailRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppID = v
	}
	return nil
}

func (p *AddFinanceDetailRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *AddFinanceDetailRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OperatedType = v
	}
	return nil
}

func (p *AddFinanceDetailRequest) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.OperatedAt = v
	}
	return nil
}

func (p *AddFinanceDetailRequest) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.OperatedBy = v
	}
	return nil
}

func (p *AddFinanceDetailRequest) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Extra = &v
	}
	return nil
}

func (p *AddFinanceDetailRequest) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.CreatedBy = v
	}
	return nil
}

func (p *AddFinanceDetailRequest) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.FinanceDetailID = v
	}
	return nil
}

func (p *AddFinanceDetailRequest) ReadField255(ctx context.Context, iprot thrift.TProtocol) error {
	p.Base = &base.RPCRequest{}
	if err := p.Base.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
	}
	return nil
}

func (p *AddFinanceDetailRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddFinanceDetailRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField255(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddFinanceDetailRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "app_id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_id: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.AppID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_id: ", p), err)
	}
	return err
}

func (p *AddFinanceDetailRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "amount", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:amount: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:amount: ", p), err)
	}
	return err
}

func (p *AddFinanceDetailRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "operated_type", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:operated_type: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.OperatedType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.operated_type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:operated_type: ", p), err)
	}
	return err
}

func (p *AddFinanceDetailRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "operated_at", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:operated_at: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.OperatedAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.operated_at (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:operated_at: ", p), err)
	}
	return err
}

func (p *AddFinanceDetailRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "operated_by", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:operated_by: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.OperatedBy)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.operated_by (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:operated_by: ", p), err)
	}
	return err
}

func (p *AddFinanceDetailRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err := oprot.WriteFieldBegin(ctx, "extra", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:extra: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Extra)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extra (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:extra: ", p), err)
		}
	}
	return err
}

func (p *AddFinanceDetailRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "created_by", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:created_by: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.CreatedBy)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.created_by (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:created_by: ", p), err)
	}
	return err
}

func (p *AddFinanceDetailRequest) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetFinanceDetailID() {
		if err := oprot.WriteFieldBegin(ctx, "finance_detail_id", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:finance_detail_id: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(p.FinanceDetailID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.finance_detail_id (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:finance_detail_id: ", p), err)
		}
	}
	return err
}

func (p *AddFinanceDetailRequest) writeField255(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err := oprot.WriteFieldBegin(ctx, "Base", thrift.STRUCT, 255); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:Base: ", p), err)
		}
		if err := p.Base.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 255:Base: ", p), err)
		}
	}
	return err
}

func (p *AddFinanceDetailRequest) Equals(other *AddFinanceDetailRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.AppID != other.AppID {
		return false
	}
	if p.Amount != other.Amount {
		return false
	}
	if p.OperatedType != other.OperatedType {
		return false
	}
	if p.OperatedAt != other.OperatedAt {
		return false
	}
	if p.OperatedBy != other.OperatedBy {
		return false
	}
	if p.Extra != other.Extra {
		if p.Extra == nil || other.Extra == nil {
			return false
		}
		if (*p.Extra) != (*other.Extra) {
			return false
		}
	}
	if p.CreatedBy != other.CreatedBy {
		return false
	}
	if p.FinanceDetailID != other.FinanceDetailID {
		return false
	}
	if !p.Base.Equals(other.Base) {
		return false
	}
	return true
}

func (p *AddFinanceDetailRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFinanceDetailRequest(%+v)", *p)
}

// Attributes:
//   - Info
//   - Base
type AddFinanceDetailResponse struct {
	Info *FinanceDetailInfo `thrift:"info,1" db:"info" json:"info,omitempty"`
	// unused fields # 2 to 254
	Base *base.RPCResponse `thrift:"Base,255,required" db:"Base" json:"Base"`
}

func NewAddFinanceDetailResponse() *AddFinanceDetailResponse {
	return &AddFinanceDetailResponse{}
}

var AddFinanceDetailResponse_Info_DEFAULT *FinanceDetailInfo

func (p *AddFinanceDetailResponse) GetInfo() *FinanceDetailInfo {
	if !p.IsSetInfo() {
		return AddFinanceDetailResponse_Info_DEFAULT
	}
	return p.Info
}

var AddFinanceDetailResponse_Base_DEFAULT *base.RPCResponse

func (p *AddFinanceDetailResponse) GetBase() *base.RPCResponse {
	if !p.IsSetBase() {
		return AddFinanceDetailResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *AddFinanceDetailResponse) IsSetInfo() bool {
	return p.Info != nil
}

func (p *AddFinanceDetailResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddFinanceDetailResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetBase bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField255(ctx, iprot); err != nil {
					return err
				}
				issetBase = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetBase {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Base is not set"))
	}
	return nil
}

func (p *AddFinanceDetailResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Info = &FinanceDetailInfo{}
	if err := p.Info.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
	}
	return nil
}

func (p *AddFinanceDetailResponse) ReadField255(ctx context.Context, iprot thrift.TProtocol) error {
	p.Base = &base.RPCResponse{}
	if err := p.Base.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
	}
	return nil
}

func (p *AddFinanceDetailResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddFinanceDetailResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField255(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddFinanceDetailResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetInfo() {
		if err := oprot.WriteFieldBegin(ctx, "info", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:info: ", p), err)
		}
		if err := p.Info.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:info: ", p), err)
		}
	}
	return err
}

func (p *AddFinanceDetailResponse) writeField255(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Base", thrift.STRUCT, 255); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:Base: ", p), err)
	}
	if err := p.Base.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 255:Base: ", p), err)
	}
	return err
}

func (p *AddFinanceDetailResponse) Equals(other *AddFinanceDetailResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Info.Equals(other.Info) {
		return false
	}
	if !p.Base.Equals(other.Base) {
		return false
	}
	return true
}

func (p *AddFinanceDetailResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFinanceDetailResponse(%+v)", *p)
}

// Attributes:
//   - AppID
//   - OperatedAt
//   - Offset
//   - Limit
//   - Base
type ListFinanceDetailRequest struct {
	AppID int64 `thrift:"app_id,1" db:"app_id" json:"app_id"`
	// unused fields # 2 to 4
	OperatedAt *TimeRange `thrift:"operated_at,5" db:"operated_at" json:"operated_at,omitempty"`
	Offset     int64      `thrift:"offset,6,required" db:"offset" json:"offset"`
	Limit      int64      `thrift:"limit,7,required" db:"limit" json:"limit"`
	// unused fields # 8 to 254
	Base *base.RPCRequest `thrift:"Base,255" db:"Base" json:"Base,omitempty"`
}

func NewListFinanceDetailRequest() *ListFinanceDetailRequest {
	return &ListFinanceDetailRequest{}
}

var ListFinanceDetailRequest_AppID_DEFAULT int64 = 0

func (p *ListFinanceDetailRequest) GetAppID() int64 {
	return p.AppID
}

var ListFinanceDetailRequest_OperatedAt_DEFAULT *TimeRange

func (p *ListFinanceDetailRequest) GetOperatedAt() *TimeRange {
	if !p.IsSetOperatedAt() {
		return ListFinanceDetailRequest_OperatedAt_DEFAULT
	}
	return p.OperatedAt
}

func (p *ListFinanceDetailRequest) GetOffset() int64 {
	return p.Offset
}

func (p *ListFinanceDetailRequest) GetLimit() int64 {
	return p.Limit
}

var ListFinanceDetailRequest_Base_DEFAULT *base.RPCRequest

func (p *ListFinanceDetailRequest) GetBase() *base.RPCRequest {
	if !p.IsSetBase() {
		return ListFinanceDetailRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListFinanceDetailRequest) IsSetAppID() bool {
	return p.AppID != ListFinanceDetailRequest_AppID_DEFAULT
}

func (p *ListFinanceDetailRequest) IsSetOperatedAt() bool {
	return p.OperatedAt != nil
}

func (p *ListFinanceDetailRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListFinanceDetailRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetOffset bool = false
	var issetLimit bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
				issetOffset = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
				issetLimit = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField255(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetOffset {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Offset is not set"))
	}
	if !issetLimit {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Limit is not set"))
	}
	return nil
}

func (p *ListFinanceDetailRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppID = v
	}
	return nil
}

func (p *ListFinanceDetailRequest) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	p.OperatedAt = &TimeRange{}
	if err := p.OperatedAt.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OperatedAt), err)
	}
	return nil
}

func (p *ListFinanceDetailRequest) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *ListFinanceDetailRequest) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *ListFinanceDetailRequest) ReadField255(ctx context.Context, iprot thrift.TProtocol) error {
	p.Base = &base.RPCRequest{}
	if err := p.Base.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
	}
	return nil
}

func (p *ListFinanceDetailRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ListFinanceDetailRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField255(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListFinanceDetailRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAppID() {
		if err := oprot.WriteFieldBegin(ctx, "app_id", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_id: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(p.AppID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.app_id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_id: ", p), err)
		}
	}
	return err
}

func (p *ListFinanceDetailRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOperatedAt() {
		if err := oprot.WriteFieldBegin(ctx, "operated_at", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:operated_at: ", p), err)
		}
		if err := p.OperatedAt.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OperatedAt), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:operated_at: ", p), err)
		}
	}
	return err
}

func (p *ListFinanceDetailRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:offset: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.offset (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:offset: ", p), err)
	}
	return err
}

func (p *ListFinanceDetailRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:limit: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limit (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:limit: ", p), err)
	}
	return err
}

func (p *ListFinanceDetailRequest) writeField255(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err := oprot.WriteFieldBegin(ctx, "Base", thrift.STRUCT, 255); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:Base: ", p), err)
		}
		if err := p.Base.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 255:Base: ", p), err)
		}
	}
	return err
}

func (p *ListFinanceDetailRequest) Equals(other *ListFinanceDetailRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.AppID != other.AppID {
		return false
	}
	if !p.OperatedAt.Equals(other.OperatedAt) {
		return false
	}
	if p.Offset != other.Offset {
		return false
	}
	if p.Limit != other.Limit {
		return false
	}
	if !p.Base.Equals(other.Base) {
		return false
	}
	return true
}

func (p *ListFinanceDetailRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListFinanceDetailRequest(%+v)", *p)
}

// Attributes:
//   - Offset
//   - Total
//   - FinanceDetails
//   - Base
type ListFinanceDetailResponse struct {
	Offset         int64                `thrift:"offset,1" db:"offset" json:"offset"`
	Total          int32                `thrift:"total,2" db:"total" json:"total"`
	FinanceDetails []*FinanceDetailInfo `thrift:"finance_details,3" db:"finance_details" json:"finance_details,omitempty"`
	// unused fields # 4 to 254
	Base *base.RPCResponse `thrift:"Base,255,required" db:"Base" json:"Base"`
}

func NewListFinanceDetailResponse() *ListFinanceDetailResponse {
	return &ListFinanceDetailResponse{}
}

var ListFinanceDetailResponse_Offset_DEFAULT int64 = 0

func (p *ListFinanceDetailResponse) GetOffset() int64 {
	return p.Offset
}

var ListFinanceDetailResponse_Total_DEFAULT int32 = 0

func (p *ListFinanceDetailResponse) GetTotal() int32 {
	return p.Total
}

var ListFinanceDetailResponse_FinanceDetails_DEFAULT []*FinanceDetailInfo

func (p *ListFinanceDetailResponse) GetFinanceDetails() []*FinanceDetailInfo {
	return p.FinanceDetails
}

var ListFinanceDetailResponse_Base_DEFAULT *base.RPCResponse

func (p *ListFinanceDetailResponse) GetBase() *base.RPCResponse {
	if !p.IsSetBase() {
		return ListFinanceDetailResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ListFinanceDetailResponse) IsSetOffset() bool {
	return p.Offset != ListFinanceDetailResponse_Offset_DEFAULT
}

func (p *ListFinanceDetailResponse) IsSetTotal() bool {
	return p.Total != ListFinanceDetailResponse_Total_DEFAULT
}

func (p *ListFinanceDetailResponse) IsSetFinanceDetails() bool {
	return p.FinanceDetails != nil
}

func (p *ListFinanceDetailResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListFinanceDetailResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetBase bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField255(ctx, iprot); err != nil {
					return err
				}
				issetBase = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetBase {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Base is not set"))
	}
	return nil
}

func (p *ListFinanceDetailResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *ListFinanceDetailResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListFinanceDetailResponse) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*FinanceDetailInfo, 0, size)
	p.FinanceDetails = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &FinanceDetailInfo{}
		if err := _elem2.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.FinanceDetails = append(p.FinanceDetails, _elem2)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ListFinanceDetailResponse) ReadField255(ctx context.Context, iprot thrift.TProtocol) error {
	p.Base = &base.RPCResponse{}
	if err := p.Base.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
	}
	return nil
}

func (p *ListFinanceDetailResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ListFinanceDetailResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField255(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListFinanceDetailResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOffset() {
		if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:offset: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.offset (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:offset: ", p), err)
		}
	}
	return err
}

func (p *ListFinanceDetailResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err := oprot.WriteFieldBegin(ctx, "total", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:total: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(p.Total)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.total (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:total: ", p), err)
		}
	}
	return err
}

func (p *ListFinanceDetailResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetFinanceDetails() {
		if err := oprot.WriteFieldBegin(ctx, "finance_details", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:finance_details: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.FinanceDetails)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.FinanceDetails {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:finance_details: ", p), err)
		}
	}
	return err
}

func (p *ListFinanceDetailResponse) writeField255(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Base", thrift.STRUCT, 255); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:Base: ", p), err)
	}
	if err := p.Base.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 255:Base: ", p), err)
	}
	return err
}

func (p *ListFinanceDetailResponse) Equals(other *ListFinanceDetailResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Offset != other.Offset {
		return false
	}
	if p.Total != other.Total {
		return false
	}
	if len(p.FinanceDetails) != len(other.FinanceDetails) {
		return false
	}
	for i, _tgt := range p.FinanceDetails {
		_src3 := other.FinanceDetails[i]
		if !_tgt.Equals(_src3) {
			return false
		}
	}
	if !p.Base.Equals(other.Base) {
		return false
	}
	return true
}

func (p *ListFinanceDetailResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListFinanceDetailResponse(%+v)", *p)
}

// Attributes:
//   - ID
//   - FinanceDetailID
//   - AppID
//   - Amount
//   - OperatedType
//   - OperatedAt
//   - OperatedBy
//   - Extra
//   - CreatedAt
//   - CreatedBy
//   - UpdatedAt
//   - UpdatedBy
type FinanceDetailInfo struct {
	ID              int64   `thrift:"id,1,required" db:"id" json:"id"`
	FinanceDetailID int64   `thrift:"finance_detail_id,2,required" db:"finance_detail_id" json:"finance_detail_id"`
	AppID           int64   `thrift:"app_id,3,required" db:"app_id" json:"app_id"`
	Amount          int64   `thrift:"amount,4,required" db:"amount" json:"amount"`
	OperatedType    int64   `thrift:"operated_type,5,required" db:"operated_type" json:"operated_type"`
	OperatedAt      int64   `thrift:"operated_at,6,required" db:"operated_at" json:"operated_at"`
	OperatedBy      string  `thrift:"operated_by,7,required" db:"operated_by" json:"operated_by"`
	Extra           *string `thrift:"extra,8" db:"extra" json:"extra,omitempty"`
	CreatedAt       int64   `thrift:"created_at,9,required" db:"created_at" json:"created_at"`
	CreatedBy       string  `thrift:"created_by,10,required" db:"created_by" json:"created_by"`
	UpdatedAt       int64   `thrift:"updated_at,11,required" db:"updated_at" json:"updated_at"`
	UpdatedBy       string  `thrift:"updated_by,12,required" db:"updated_by" json:"updated_by"`
}

func NewFinanceDetailInfo() *FinanceDetailInfo {
	return &FinanceDetailInfo{}
}

func (p *FinanceDetailInfo) GetID() int64 {
	return p.ID
}

func (p *FinanceDetailInfo) GetFinanceDetailID() int64 {
	return p.FinanceDetailID
}

func (p *FinanceDetailInfo) GetAppID() int64 {
	return p.AppID
}

func (p *FinanceDetailInfo) GetAmount() int64 {
	return p.Amount
}

func (p *FinanceDetailInfo) GetOperatedType() int64 {
	return p.OperatedType
}

func (p *FinanceDetailInfo) GetOperatedAt() int64 {
	return p.OperatedAt
}

func (p *FinanceDetailInfo) GetOperatedBy() string {
	return p.OperatedBy
}

var FinanceDetailInfo_Extra_DEFAULT string

func (p *FinanceDetailInfo) GetExtra() string {
	if !p.IsSetExtra() {
		return FinanceDetailInfo_Extra_DEFAULT
	}
	return *p.Extra
}

func (p *FinanceDetailInfo) GetCreatedAt() int64 {
	return p.CreatedAt
}

func (p *FinanceDetailInfo) GetCreatedBy() string {
	return p.CreatedBy
}

func (p *FinanceDetailInfo) GetUpdatedAt() int64 {
	return p.UpdatedAt
}

func (p *FinanceDetailInfo) GetUpdatedBy() string {
	return p.UpdatedBy
}
func (p *FinanceDetailInfo) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *FinanceDetailInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetFinanceDetailID bool = false
	var issetAppID bool = false
	var issetAmount bool = false
	var issetOperatedType bool = false
	var issetOperatedAt bool = false
	var issetOperatedBy bool = false
	var issetCreatedAt bool = false
	var issetCreatedBy bool = false
	var issetUpdatedAt bool = false
	var issetUpdatedBy bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetFinanceDetailID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetAppID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetAmount = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetOperatedType = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
				issetOperatedAt = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
				issetOperatedBy = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
				issetCreatedAt = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
				issetCreatedBy = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
				issetUpdatedAt = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField12(ctx, iprot); err != nil {
					return err
				}
				issetUpdatedBy = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetFinanceDetailID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FinanceDetailID is not set"))
	}
	if !issetAppID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppID is not set"))
	}
	if !issetAmount {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Amount is not set"))
	}
	if !issetOperatedType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OperatedType is not set"))
	}
	if !issetOperatedAt {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OperatedAt is not set"))
	}
	if !issetOperatedBy {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OperatedBy is not set"))
	}
	if !issetCreatedAt {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CreatedAt is not set"))
	}
	if !issetCreatedBy {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CreatedBy is not set"))
	}
	if !issetUpdatedAt {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UpdatedAt is not set"))
	}
	if !issetUpdatedBy {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UpdatedBy is not set"))
	}
	return nil
}

func (p *FinanceDetailInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *FinanceDetailInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FinanceDetailID = v
	}
	return nil
}

func (p *FinanceDetailInfo) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AppID = v
	}
	return nil
}

func (p *FinanceDetailInfo) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *FinanceDetailInfo) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.OperatedType = v
	}
	return nil
}

func (p *FinanceDetailInfo) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.OperatedAt = v
	}
	return nil
}

func (p *FinanceDetailInfo) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.OperatedBy = v
	}
	return nil
}

func (p *FinanceDetailInfo) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Extra = &v
	}
	return nil
}

func (p *FinanceDetailInfo) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.CreatedAt = v
	}
	return nil
}

func (p *FinanceDetailInfo) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.CreatedBy = v
	}
	return nil
}

func (p *FinanceDetailInfo) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.UpdatedAt = v
	}
	return nil
}

func (p *FinanceDetailInfo) ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.UpdatedBy = v
	}
	return nil
}

func (p *FinanceDetailInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "FinanceDetailInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField10(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField11(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField12(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FinanceDetailInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *FinanceDetailInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "finance_detail_id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:finance_detail_id: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.FinanceDetailID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.finance_detail_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:finance_detail_id: ", p), err)
	}
	return err
}

func (p *FinanceDetailInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "app_id", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:app_id: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.AppID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:app_id: ", p), err)
	}
	return err
}

func (p *FinanceDetailInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "amount", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:amount: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:amount: ", p), err)
	}
	return err
}

func (p *FinanceDetailInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "operated_type", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:operated_type: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.OperatedType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.operated_type (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:operated_type: ", p), err)
	}
	return err
}

func (p *FinanceDetailInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "operated_at", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:operated_at: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.OperatedAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.operated_at (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:operated_at: ", p), err)
	}
	return err
}

func (p *FinanceDetailInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "operated_by", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:operated_by: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.OperatedBy)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.operated_by (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:operated_by: ", p), err)
	}
	return err
}

func (p *FinanceDetailInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err := oprot.WriteFieldBegin(ctx, "extra", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:extra: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Extra)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extra (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:extra: ", p), err)
		}
	}
	return err
}

func (p *FinanceDetailInfo) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "created_at", thrift.I64, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:created_at: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.CreatedAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.created_at (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:created_at: ", p), err)
	}
	return err
}

func (p *FinanceDetailInfo) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "created_by", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:created_by: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.CreatedBy)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.created_by (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:created_by: ", p), err)
	}
	return err
}

func (p *FinanceDetailInfo) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "updated_at", thrift.I64, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:updated_at: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.UpdatedAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updated_at (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:updated_at: ", p), err)
	}
	return err
}

func (p *FinanceDetailInfo) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "updated_by", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:updated_by: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.UpdatedBy)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updated_by (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:updated_by: ", p), err)
	}
	return err
}

func (p *FinanceDetailInfo) Equals(other *FinanceDetailInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ID != other.ID {
		return false
	}
	if p.FinanceDetailID != other.FinanceDetailID {
		return false
	}
	if p.AppID != other.AppID {
		return false
	}
	if p.Amount != other.Amount {
		return false
	}
	if p.OperatedType != other.OperatedType {
		return false
	}
	if p.OperatedAt != other.OperatedAt {
		return false
	}
	if p.OperatedBy != other.OperatedBy {
		return false
	}
	if p.Extra != other.Extra {
		if p.Extra == nil || other.Extra == nil {
			return false
		}
		if (*p.Extra) != (*other.Extra) {
			return false
		}
	}
	if p.CreatedAt != other.CreatedAt {
		return false
	}
	if p.CreatedBy != other.CreatedBy {
		return false
	}
	if p.UpdatedAt != other.UpdatedAt {
		return false
	}
	if p.UpdatedBy != other.UpdatedBy {
		return false
	}
	return true
}

func (p *FinanceDetailInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FinanceDetailInfo(%+v)", *p)
}

// Attributes:
//   - S
//   - E
type TimeRange struct {
	S int64 `thrift:"s,1,required" db:"s" json:"s"`
	E int64 `thrift:"e,2,required" db:"e" json:"e"`
}

func NewTimeRange() *TimeRange {
	return &TimeRange{}
}

func (p *TimeRange) GetS() int64 {
	return p.S
}

func (p *TimeRange) GetE() int64 {
	return p.E
}
func (p *TimeRange) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetS bool = false
	var issetE bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetS = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetE = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetS {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field S is not set"))
	}
	if !issetE {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field E is not set"))
	}
	return nil
}

func (p *TimeRange) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.S = v
	}
	return nil
}

func (p *TimeRange) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.E = v
	}
	return nil
}

func (p *TimeRange) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TimeRange"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeRange) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "s", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:s: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.S)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.s (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:s: ", p), err)
	}
	return err
}

func (p *TimeRange) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "e", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:e: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.E)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.e (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:e: ", p), err)
	}
	return err
}

func (p *TimeRange) Equals(other *TimeRange) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.S != other.S {
		return false
	}
	if p.E != other.E {
		return false
	}
	return true
}

func (p *TimeRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeRange(%+v)", *p)
}

type MoneyHandler interface {
	// Parameters:
	//  - Req
	GenFinanceDetailIDs(ctx context.Context, req *GenFinanceDetailIDsRequest) (_r *GenFinanceDetailIDsResponse, _err error)
	// Parameters:
	//  - Req
	AddFinanceDetail(ctx context.Context, req *AddFinanceDetailRequest) (_r *AddFinanceDetailResponse, _err error)
	// Parameters:
	//  - Req
	ListFinanceDetail(ctx context.Context, req *ListFinanceDetailRequest) (_r *ListFinanceDetailResponse, _err error)
}

type MoneyHandlerClient struct {
	c    thrift.TClient
	meta thrift.ResponseMeta
}

func NewMoneyHandlerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MoneyHandlerClient {
	return &MoneyHandlerClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMoneyHandlerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MoneyHandlerClient {
	return &MoneyHandlerClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMoneyHandlerClient(c thrift.TClient) *MoneyHandlerClient {
	return &MoneyHandlerClient{
		c: c,
	}
}

func (p *MoneyHandlerClient) Client_() thrift.TClient {
	return p.c
}

func (p *MoneyHandlerClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *MoneyHandlerClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//   - Req
func (p *MoneyHandlerClient) GenFinanceDetailIDs(ctx context.Context, req *GenFinanceDetailIDsRequest) (_r *GenFinanceDetailIDsResponse, _err error) {
	var _args4 MoneyHandlerGenFinanceDetailIDsArgs
	_args4.Req = req
	var _result6 MoneyHandlerGenFinanceDetailIDsResult
	var _meta5 thrift.ResponseMeta
	_meta5, _err = p.Client_().Call(ctx, "GenFinanceDetailIDs", &_args4, &_result6)
	p.SetLastResponseMeta_(_meta5)
	if _err != nil {
		return
	}
	if _ret7 := _result6.GetSuccess(); _ret7 != nil {
		return _ret7, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "GenFinanceDetailIDs failed: unknown result")
}

// Parameters:
//   - Req
func (p *MoneyHandlerClient) AddFinanceDetail(ctx context.Context, req *AddFinanceDetailRequest) (_r *AddFinanceDetailResponse, _err error) {
	var _args8 MoneyHandlerAddFinanceDetailArgs
	_args8.Req = req
	var _result10 MoneyHandlerAddFinanceDetailResult
	var _meta9 thrift.ResponseMeta
	_meta9, _err = p.Client_().Call(ctx, "AddFinanceDetail", &_args8, &_result10)
	p.SetLastResponseMeta_(_meta9)
	if _err != nil {
		return
	}
	if _ret11 := _result10.GetSuccess(); _ret11 != nil {
		return _ret11, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "AddFinanceDetail failed: unknown result")
}

// Parameters:
//   - Req
func (p *MoneyHandlerClient) ListFinanceDetail(ctx context.Context, req *ListFinanceDetailRequest) (_r *ListFinanceDetailResponse, _err error) {
	var _args12 MoneyHandlerListFinanceDetailArgs
	_args12.Req = req
	var _result14 MoneyHandlerListFinanceDetailResult
	var _meta13 thrift.ResponseMeta
	_meta13, _err = p.Client_().Call(ctx, "ListFinanceDetail", &_args12, &_result14)
	p.SetLastResponseMeta_(_meta13)
	if _err != nil {
		return
	}
	if _ret15 := _result14.GetSuccess(); _ret15 != nil {
		return _ret15, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "ListFinanceDetail failed: unknown result")
}

type MoneyHandlerProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MoneyHandler
}

func (p *MoneyHandlerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MoneyHandlerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MoneyHandlerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMoneyHandlerProcessor(handler MoneyHandler) *MoneyHandlerProcessor {

	self16 := &MoneyHandlerProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self16.processorMap["GenFinanceDetailIDs"] = &moneyHandlerProcessorGenFinanceDetailIDs{handler: handler}
	self16.processorMap["AddFinanceDetail"] = &moneyHandlerProcessorAddFinanceDetail{handler: handler}
	self16.processorMap["ListFinanceDetail"] = &moneyHandlerProcessorListFinanceDetail{handler: handler}
	return self16
}

func (p *MoneyHandlerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil {
		return false, thrift.WrapTException(err2)
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x17 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x17.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x17

}

type moneyHandlerProcessorGenFinanceDetailIDs struct {
	handler MoneyHandler
}

func (p *moneyHandlerProcessorGenFinanceDetailIDs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err18 error
	args := MoneyHandlerGenFinanceDetailIDsArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "GenFinanceDetailIDs", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := MoneyHandlerGenFinanceDetailIDsResult{}
	if retval, err2 := p.handler.GenFinanceDetailIDs(ctx, args.Req); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		_exc19 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GenFinanceDetailIDs: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "GenFinanceDetailIDs", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err18 = thrift.WrapTException(err2)
		}
		if err2 := _exc19.Write(ctx, oprot); _write_err18 == nil && err2 != nil {
			_write_err18 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err18 == nil && err2 != nil {
			_write_err18 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err18 == nil && err2 != nil {
			_write_err18 = thrift.WrapTException(err2)
		}
		if _write_err18 != nil {
			return false, thrift.WrapTException(_write_err18)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "GenFinanceDetailIDs", thrift.REPLY, seqId); err2 != nil {
		_write_err18 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err18 == nil && err2 != nil {
		_write_err18 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err18 == nil && err2 != nil {
		_write_err18 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err18 == nil && err2 != nil {
		_write_err18 = thrift.WrapTException(err2)
	}
	if _write_err18 != nil {
		return false, thrift.WrapTException(_write_err18)
	}
	return true, err
}

type moneyHandlerProcessorAddFinanceDetail struct {
	handler MoneyHandler
}

func (p *moneyHandlerProcessorAddFinanceDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err20 error
	args := MoneyHandlerAddFinanceDetailArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "AddFinanceDetail", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := MoneyHandlerAddFinanceDetailResult{}
	if retval, err2 := p.handler.AddFinanceDetail(ctx, args.Req); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		_exc21 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddFinanceDetail: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "AddFinanceDetail", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err20 = thrift.WrapTException(err2)
		}
		if err2 := _exc21.Write(ctx, oprot); _write_err20 == nil && err2 != nil {
			_write_err20 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err20 == nil && err2 != nil {
			_write_err20 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err20 == nil && err2 != nil {
			_write_err20 = thrift.WrapTException(err2)
		}
		if _write_err20 != nil {
			return false, thrift.WrapTException(_write_err20)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "AddFinanceDetail", thrift.REPLY, seqId); err2 != nil {
		_write_err20 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err20 == nil && err2 != nil {
		_write_err20 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err20 == nil && err2 != nil {
		_write_err20 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err20 == nil && err2 != nil {
		_write_err20 = thrift.WrapTException(err2)
	}
	if _write_err20 != nil {
		return false, thrift.WrapTException(_write_err20)
	}
	return true, err
}

type moneyHandlerProcessorListFinanceDetail struct {
	handler MoneyHandler
}

func (p *moneyHandlerProcessorListFinanceDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err22 error
	args := MoneyHandlerListFinanceDetailArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "ListFinanceDetail", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := MoneyHandlerListFinanceDetailResult{}
	if retval, err2 := p.handler.ListFinanceDetail(ctx, args.Req); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		_exc23 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListFinanceDetail: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "ListFinanceDetail", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err22 = thrift.WrapTException(err2)
		}
		if err2 := _exc23.Write(ctx, oprot); _write_err22 == nil && err2 != nil {
			_write_err22 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err22 == nil && err2 != nil {
			_write_err22 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err22 == nil && err2 != nil {
			_write_err22 = thrift.WrapTException(err2)
		}
		if _write_err22 != nil {
			return false, thrift.WrapTException(_write_err22)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "ListFinanceDetail", thrift.REPLY, seqId); err2 != nil {
		_write_err22 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err22 == nil && err2 != nil {
		_write_err22 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err22 == nil && err2 != nil {
		_write_err22 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err22 == nil && err2 != nil {
		_write_err22 = thrift.WrapTException(err2)
	}
	if _write_err22 != nil {
		return false, thrift.WrapTException(_write_err22)
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//   - Req
type MoneyHandlerGenFinanceDetailIDsArgs struct {
	Req *GenFinanceDetailIDsRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewMoneyHandlerGenFinanceDetailIDsArgs() *MoneyHandlerGenFinanceDetailIDsArgs {
	return &MoneyHandlerGenFinanceDetailIDsArgs{}
}

var MoneyHandlerGenFinanceDetailIDsArgs_Req_DEFAULT *GenFinanceDetailIDsRequest

func (p *MoneyHandlerGenFinanceDetailIDsArgs) GetReq() *GenFinanceDetailIDsRequest {
	if !p.IsSetReq() {
		return MoneyHandlerGenFinanceDetailIDsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MoneyHandlerGenFinanceDetailIDsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MoneyHandlerGenFinanceDetailIDsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MoneyHandlerGenFinanceDetailIDsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &GenFinanceDetailIDsRequest{
		Amount: 1,
	}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *MoneyHandlerGenFinanceDetailIDsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GenFinanceDetailIDs_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MoneyHandlerGenFinanceDetailIDsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *MoneyHandlerGenFinanceDetailIDsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MoneyHandlerGenFinanceDetailIDsArgs(%+v)", *p)
}

// Attributes:
//   - Success
type MoneyHandlerGenFinanceDetailIDsResult struct {
	Success *GenFinanceDetailIDsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMoneyHandlerGenFinanceDetailIDsResult() *MoneyHandlerGenFinanceDetailIDsResult {
	return &MoneyHandlerGenFinanceDetailIDsResult{}
}

var MoneyHandlerGenFinanceDetailIDsResult_Success_DEFAULT *GenFinanceDetailIDsResponse

func (p *MoneyHandlerGenFinanceDetailIDsResult) GetSuccess() *GenFinanceDetailIDsResponse {
	if !p.IsSetSuccess() {
		return MoneyHandlerGenFinanceDetailIDsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MoneyHandlerGenFinanceDetailIDsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MoneyHandlerGenFinanceDetailIDsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MoneyHandlerGenFinanceDetailIDsResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &GenFinanceDetailIDsResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MoneyHandlerGenFinanceDetailIDsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GenFinanceDetailIDs_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MoneyHandlerGenFinanceDetailIDsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MoneyHandlerGenFinanceDetailIDsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MoneyHandlerGenFinanceDetailIDsResult(%+v)", *p)
}

// Attributes:
//   - Req
type MoneyHandlerAddFinanceDetailArgs struct {
	Req *AddFinanceDetailRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewMoneyHandlerAddFinanceDetailArgs() *MoneyHandlerAddFinanceDetailArgs {
	return &MoneyHandlerAddFinanceDetailArgs{}
}

var MoneyHandlerAddFinanceDetailArgs_Req_DEFAULT *AddFinanceDetailRequest

func (p *MoneyHandlerAddFinanceDetailArgs) GetReq() *AddFinanceDetailRequest {
	if !p.IsSetReq() {
		return MoneyHandlerAddFinanceDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MoneyHandlerAddFinanceDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MoneyHandlerAddFinanceDetailArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MoneyHandlerAddFinanceDetailArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &AddFinanceDetailRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *MoneyHandlerAddFinanceDetailArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddFinanceDetail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MoneyHandlerAddFinanceDetailArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *MoneyHandlerAddFinanceDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MoneyHandlerAddFinanceDetailArgs(%+v)", *p)
}

// Attributes:
//   - Success
type MoneyHandlerAddFinanceDetailResult struct {
	Success *AddFinanceDetailResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMoneyHandlerAddFinanceDetailResult() *MoneyHandlerAddFinanceDetailResult {
	return &MoneyHandlerAddFinanceDetailResult{}
}

var MoneyHandlerAddFinanceDetailResult_Success_DEFAULT *AddFinanceDetailResponse

func (p *MoneyHandlerAddFinanceDetailResult) GetSuccess() *AddFinanceDetailResponse {
	if !p.IsSetSuccess() {
		return MoneyHandlerAddFinanceDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MoneyHandlerAddFinanceDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MoneyHandlerAddFinanceDetailResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MoneyHandlerAddFinanceDetailResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AddFinanceDetailResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MoneyHandlerAddFinanceDetailResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddFinanceDetail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MoneyHandlerAddFinanceDetailResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MoneyHandlerAddFinanceDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MoneyHandlerAddFinanceDetailResult(%+v)", *p)
}

// Attributes:
//   - Req
type MoneyHandlerListFinanceDetailArgs struct {
	Req *ListFinanceDetailRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewMoneyHandlerListFinanceDetailArgs() *MoneyHandlerListFinanceDetailArgs {
	return &MoneyHandlerListFinanceDetailArgs{}
}

var MoneyHandlerListFinanceDetailArgs_Req_DEFAULT *ListFinanceDetailRequest

func (p *MoneyHandlerListFinanceDetailArgs) GetReq() *ListFinanceDetailRequest {
	if !p.IsSetReq() {
		return MoneyHandlerListFinanceDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MoneyHandlerListFinanceDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MoneyHandlerListFinanceDetailArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MoneyHandlerListFinanceDetailArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &ListFinanceDetailRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *MoneyHandlerListFinanceDetailArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ListFinanceDetail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MoneyHandlerListFinanceDetailArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *MoneyHandlerListFinanceDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MoneyHandlerListFinanceDetailArgs(%+v)", *p)
}

// Attributes:
//   - Success
type MoneyHandlerListFinanceDetailResult struct {
	Success *ListFinanceDetailResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMoneyHandlerListFinanceDetailResult() *MoneyHandlerListFinanceDetailResult {
	return &MoneyHandlerListFinanceDetailResult{}
}

var MoneyHandlerListFinanceDetailResult_Success_DEFAULT *ListFinanceDetailResponse

func (p *MoneyHandlerListFinanceDetailResult) GetSuccess() *ListFinanceDetailResponse {
	if !p.IsSetSuccess() {
		return MoneyHandlerListFinanceDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MoneyHandlerListFinanceDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MoneyHandlerListFinanceDetailResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MoneyHandlerListFinanceDetailResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &ListFinanceDetailResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MoneyHandlerListFinanceDetailResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ListFinanceDetail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MoneyHandlerListFinanceDetailResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MoneyHandlerListFinanceDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MoneyHandlerListFinanceDetailResult(%+v)", *p)
}
